// UI
#include "mainwindow.h"
#include "ui_mainwindow.h"
//#include <opencv2/core/core.hpp>
//#include <opencv2/opencv.hpp>
//#include "opencv2/imgcodecs.hpp"
//#include "opencv2/imgproc.hpp"
//#include "opencv2/videoio.hpp"
//#include <opencv2/video.hpp>
//#include <iostream>

// Opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
#include "opencv2/bgsegm.hpp"
#include <opencv2/opencv.hpp>
#include "opencv2/features2d.hpp"

// SIFT library
#include "opencv2/xfeatures2d.hpp"

//#include <dlib/image_processing.h>
//#include <dlib/data_io.h>
//#include <dlib/image_processing/frontal_face_detector.h>

#include <iostream>
#include <sstream>

#include "backgroundsubtraction.h"

// using namespace dlib;
using namespace std;
using namespace cv;


MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{

    ui->setupUi(this);

 //dlib::array<array2d<unsigned char> > images_train, images_test;
//    dlib::frontal_face_detector detector = dlib::get_frontal_face_detector();


      //Variables
    // Creating the pointer Background Subtraction
    BackgroundSubtraction* bs = new BackgroundSubtraction();
    Mat edges;
    Mat fgMask;
    Mat fgMaskMOG; // fg mask generated by MOG method
    Mat fgMaskMOG2; // fg mask generated by MOG2 method
    Mat fgMaskGMG; // fg mask generated by GMG method
    Mat fgMaskKNN; // fg mask generated by KNN method
    Mat resizeF;

    // Create the pointer for SIFT
    cv::Ptr<Feature2D> sift = xfeatures2d::SIFT::create();
    // Create the pointer for SURF
    cv::Ptr<Feature2D> surf = xfeatures2d::SURF::create();
    // Create the pointer for BriefDescriptorExtractor
    cv::Ptr<Feature2D> brief = xfeatures2d::BriefDescriptorExtractor::create();
    // Create the pointer for FastFeatureDetector
    cv::Ptr<Feature2D> fast = FastFeatureDetector::create();
    // Create the pointer for ORB
    cv::Ptr<Feature2D> orb = ORB::create();
    // Init Key Points
    vector<KeyPoint> keypoints_1;
    // Init descriptors
    Mat descriptors_1;
    Mat img_keypoints_1;
    // Frame gray scale
    Mat grayFrame;
    // Option to save the image
    int optAlgorithm;






      //Messages for the label
      QString infoCamera = "Camera Status";
      QString cameraWorking = "Camera is working";
      QString cameraNotWorking = "Camera is not working";

      //Quit the app
        connect(ui->btQuit, &QPushButton::clicked,this,&QMainWindow::close);


    // Inform about the status of the camera
    ui->lbCameraInfo->setText(infoCamera);



    //Getting frames from the camera
    VideoCapture cap(0); // open the default camera

//        if(!cap.isOpened())  // check if we succeeded
//            ui->lbCameraInfo->setText(cameraNotWorking);
//        else
//        ui->lbCameraInfo->setText(cameraWorking);


        for(;;)
        {
            Mat frame;
            cap >> frame; // get a new frame from camera

            //fgMaskMOG2 = bs -> applyMOG2(frame,fgMaskMOG2);
            //cvtColor(frame, edges, COLOR_BGR2Lab);
            //imshow("Lab Color", edges);

            //imshow("Frame",frame);

            //imshow("FGMask MOG 2",fgMaskMOG2);

            // SIFT section
//            optAlgorithm = 0;
//             First of all it's compulsory to convert the frame to gray scale
//            cvtColor(frame, grayFrame, COLOR_BGR2GRAY);
//            // Detect the keypoints
//            sift->detect(grayFrame, keypoints_1 );
//            // Calculate the descriptors
//            sift->compute(grayFrame, keypoints_1, descriptors_1);
//            // Draw Keypoints
//            drawKeypoints(grayFrame, keypoints_1, img_keypoints_1);
//            // Show detected (drawn) keypoints
//            imshow("Keypoints 1", img_keypoints_1);

            // SURF section
//            optAlgorithm = 1;
//            // First of all it's compulsory to convert the frame to gray scale
//            cvtColor(frame, grayFrame, COLOR_BGR2GRAY);
//            // Detect the keypoints
//            surf->detect(grayFrame, keypoints_1 );
//            // Calculate the descriptors
//            surf->compute(grayFrame, keypoints_1, descriptors_1);
//            // Draw Keypoints
//            drawKeypoints(grayFrame, keypoints_1, img_keypoints_1);
//            // Show detected (drawn) keypoints
//            imshow("Keypoints 1", img_keypoints_1);

            // ORB section
//            optAlgorithm = 2;
//            // First of all it's compulsory to convert the frame to gray scale
//            cvtColor(frame, grayFrame, COLOR_BGR2GRAY);
//            // Detect the keypoints
//            orb->detect(grayFrame, keypoints_1 );
//            // Calculate the descriptors
//            orb->compute(grayFrame, keypoints_1, descriptors_1);
//            // Draw Keypoints
//            drawKeypoints(grayFrame, keypoints_1, img_keypoints_1);
//            // Show detected (drawn) keypoints
//            imshow("Keypoints 1", img_keypoints_1);

            // BriefDescriptorExtractor section
            optAlgorithm = 3;
            // First of all it's compulsory to convert the frame to gray scale
            cvtColor(frame, grayFrame, COLOR_BGR2GRAY);
            // Detect the keypoints with FAST
            surf->detect(grayFrame, keypoints_1 );
            // Calculate the descriptors with BRIEF
           brief->compute(grayFrame, keypoints_1, descriptors_1);
            // Draw Keypoints
            drawKeypoints(grayFrame, keypoints_1, img_keypoints_1);
            // Show detected (drawn) keypoints
           imshow("Keypoints 1", img_keypoints_1);



            if(waitKey(10) == 27){
                switch (optAlgorithm) {
                case 0:
                    // SIFT
                    imwrite("/home/acg/Pictures/Feature_Descriptors_Algth/SIFT_keypoints.jpg",img_keypoints_1);
                    break;
                case 1:
                    // SURF
                    imwrite("/home/acg/Pictures/Feature_Descriptors_Algth/SURF_keypoints.jpg",img_keypoints_1);
                    break;
                case 2:
                    // ORB
                    imwrite("/home/acg/Pictures/Feature_Descriptors_Algth/ORB_keypoints.jpg",img_keypoints_1);
                    break;
                case 3:
                    // BoostDesc & FastFeatureDetector
                    imwrite("/home/acg/Pictures/Feature_Descriptors_Algth/BriefAndFast_keypoints.jpg",img_keypoints_1);
                    break;
                default:
                    cout<<"There isn't any algorithm selected"<<endl;
                    break;
                }

                break;
            }

            //if(waitKey(10) == 27) break;
        }



}



MainWindow::~MainWindow()
{
    delete ui;
}
