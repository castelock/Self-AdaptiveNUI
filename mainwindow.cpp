// UI
#include "mainwindow.h"
#include "ui_mainwindow.h"
//#include <opencv2/core/core.hpp>
//#include <opencv2/opencv.hpp>
//#include "opencv2/imgcodecs.hpp"
//#include "opencv2/imgproc.hpp"
//#include "opencv2/videoio.hpp"
//#include <opencv2/video.hpp>
//#include <iostream>

// Opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
#include "opencv2/core/cuda.hpp"
//#include "opencv2/video/background_segm.hpp"
#include "opencv2/bgsegm.hpp"
#include <opencv2/opencv.hpp>

#include <dlib/image_processing.h>
#include <dlib/data_io.h>

#include <iostream>
#include <sstream>

using namespace dlib;
using namespace std;
using namespace cv;


MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{

    ui->setupUi(this);

 dlib::array<array2d<unsigned char> > images_train, images_test;


      //Variables
      Ptr<BackgroundSubtractor> bg_model; // MOG Background subtractor
      Ptr<BackgroundSubtractor> bg_model2; // MOG2 Background subtractor
      Ptr< BackgroundSubtractor> pGMG; // GMG Background subtractor
      Ptr< BackgroundSubtractor> pKNN; // KNN Background subtractor
      Mat edges;
      Mat fgMask; // fg mask generated by MOG method
      Mat fgMask2; // fg mask generated by MOG2 method
      Mat fgMaskGMG; // fg mask generated by GMG method
      Mat fgMaskKNN; // fg mask generated by KNN method
      Mat resizeF;



      //Messages for the label
      QString infoCamera = "Camera Status";
      QString cameraWorking = "Camera is working";
      QString cameraNotWorking = "Camera is not working";

      //Quit the app
        connect(ui->btQuit, &QPushButton::clicked,this,&QMainWindow::close);


    // Inform about the status of the camera
    ui->lbCameraInfo->setText(infoCamera);

    // Create background substractors
    bg_model = bgsegm::createBackgroundSubtractorMOG();
    bg_model2 = createBackgroundSubtractorMOG2();
    pGMG = bgsegm::createBackgroundSubtractorGMG();
    pKNN = createBackgroundSubtractorKNN();

    //Getting frames from the camera
    VideoCapture cap(0); // open the default camera

//        if(!cap.isOpened())  // check if we succeeded
//            ui->lbCameraInfo->setText(cameraNotWorking);
//        else
//        ui->lbCameraInfo->setText(cameraWorking);


        for(;;)
        {
            Mat frame;
            cap >> frame; // get a new frame from camera
//            bg_model -> apply(frame, fgMask);
//            bg_model2 -> apply(frame,fgMask2);
            // Resize
            pGMG->apply(frame, fgMaskGMG);
            pKNN->apply(frame, fgMaskKNN);
            //cvtColor(frame, edges, COLOR_BGR2Lab);
            //imshow("Lab Color", edges);
            imshow("Frame",frame);
            imshow("GMG", fgMaskGMG);
            imshow("KNN", fgMaskKNN);
//            imshow("FGMask MOG",fgMask);
//            imshow("FGMask MOG 2",fgMask2);


            if(waitKey(10) == 27) break;
        }







//    Mat inputImage = imread("/home/acg/Pictures/acglogo.png");
//    if(!inputImage.empty()) imshow("Display Image", inputImage);
//    waitKey();


}



MainWindow::~MainWindow()
{
    delete ui;
}
